#include <iostream>
#include <stdio.h>
#include <cstdlib>
#include <string>
#include <vector>
#include <cmath>
using namespace std;

class Node {
public:
	int key;
	Node* next;
	int cnt = 1;
	Node(int k) {
		this->key = k;
		this->next = NULL;
	}
};
class HashLinkedlist {
public:
	Node* head;
	Node* tail;
	HashLinkedlist() {
		head = tail = NULL;
	}
	void addValueHead(int key) {
		Node* newnode = new Node(key);
		head = tail = newnode;
	}
	void addValueTail(int key) {
		Node* newnode = new Node(key);
		tail->next = newnode;
		tail = newnode;
	}
};
class HashMap {
public:
	HashLinkedlist* container;
	int storage_size;
	HashMap(int s) {
		container = new HashLinkedlist[s];
		this->storage_size = s;
	}

	int hash(int key) {
		int hashvalue = abs(key) % storage_size;
		return hashvalue;
	}
	int findByKey(int key) {
		int count = 0;
		int hashcode = this->hash(key);
		Node* now_cursor = container[hashcode].head;
		if (now_cursor == NULL) {	//키에 해당되는 곳이 비어있을 경우 0개 저장되어 있으므로 0 리턴
			return count;
		}
		else {
			while (now_cursor != NULL) {
				if (key == now_cursor->key) {
					count = now_cursor->cnt;
				}
				now_cursor = now_cursor->next;
			}
			return count;
		}
	}
	void putValue(int key) {
		int hashcode = this->hash(key);
		Node* now_cursor = container[hashcode].head;
		if (now_cursor == NULL) {	//키에 해당되는 곳이 비어있을 경우 0개 저장되어 있으므로 0 리턴
			container[hashcode].addValueHead(key);
		}
		else {
			while (now_cursor != NULL) {
				if (key == now_cursor->key) {
					now_cursor->cnt++;
					return;
				}
				now_cursor = now_cursor->next;
			}
			container[hashcode].addValueTail(key);
		}
	}
};
int main() {
	int my_card, card_key, find_card;
	scanf("%d", &my_card);
	HashMap H(my_card);
	for (int i = 0; i < my_card; i++) {
		scanf("%d", &card_key);
		H.putValue(card_key);
	}
	scanf("%d", &find_card);
	vector<int>card_list;
	for (int i = 0; i < find_card; i++) {
		scanf("%d", &card_key);
		card_list.push_back(card_key);
	}
	for (int i = 0; i < find_card; i++) {
		printf("%d ", H.findByKey(card_list[i]));
	}
}
