#include <iostream>
#include <stdio.h>
#include <string>
#include <cctype>
using namespace std;

class Node {
public:
	string key;
	int value;
	Node* next;
	Node(string k, int v) {
		this->key = k;
		this->value = v;
		this->next = NULL;
	}
};
class HashLinkedlist {
public:
	Node* head;
	Node* tail;
	HashLinkedlist() {
		head = tail = NULL;
	}
	bool empty() {
		return (head == NULL) & (tail == NULL);
	}
	void addValue(string key, int value) {
		Node* newnode = new Node(key, value);
		if (empty()) {
			head = tail = newnode;
		}
		else {
			tail->next = newnode;
			tail = newnode;
		}
	}
};
class HashMap {
public:
	HashLinkedlist* container;
	int storage_size;
	string* pkm_list;
	HashMap(int s) {
		container = new HashLinkedlist[s];
		this->storage_size = s;
		pkm_list = new string[s + 1];
	}
	int hash(string key) {
		int hashvalue = -1;
		int tmp = 0;

		for (char c : key) {
			tmp += (int)c;			//해쉬 함수 : 문자열의 각각의 문자을 아스키 코드로 변환후 모두 더함.
		}
		hashvalue = tmp % storage_size;				//그 다음 저장소의 갯수로 나눔.

		return hashvalue;
	}
	int findPKMNumberByKey(string key) {
		int hashcode = this->hash(key);
		Node* now_cursor = container[hashcode].head;
		while (now_cursor != NULL) {
			if (key == now_cursor->key) {
				return now_cursor->value;
			}
			now_cursor = now_cursor->next;
		}
	}
	string findPKMbyNum(int num) {
		return pkm_list[num];
	}
	void putValue(string key, int num) {
		int hashcode = this->hash(key);		//key값을 해쉬함수를 이용하여 해쉬값으로 변환
		container[hashcode].addValue(key, num);
		pkm_list[num] = key;
	}
};

int main() {
	int pkm_count, problem_count,pkm_number;
	string now_pkm;
	char* pkm = new char[20];
	scanf("%d %d", &pkm_count, &problem_count);
	HashMap* hashmap = new HashMap(pkm_count);
	for (int i = 1; i < pkm_count+1; i++) {
		scanf("%s", pkm);
		hashmap->putValue(pkm,i);
	}
	char* test = new char[20];
	for (int i = 0; i < problem_count; i++) {
		scanf("%s", test);
		if (isdigit(test[0]) == 0) { //문자인지 숫자인지 판별, 문자이면 0이 나옴
			pkm_number = hashmap->findPKMNumberByKey(test);
			printf("%d\n", pkm_number);
		}
		else {
;			now_pkm = hashmap->findPKMbyNum(stoi(test));
			printf("%s\n", now_pkm.c_str());
		}
	}
	
}
